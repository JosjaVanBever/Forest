#!/bin/bash

# name of shell script
ME=$(basename "$0")


# prints for error messages and help
SYNTAX="SYNTAXIS: ${ME} [-f FILTER1 -f FILTER2 ..] [-i INFILES] [-t]
-l walltime=xx:xx:xx -l nodes=y:ppn=z [-q QUEUE] [-o OTHERS] CLUSTER"


# display info for --help = -h flag
display_help() { echo "
USAGE:
${SYNTAX}

OPTIONS:
  -h, --help              Display help.
  ---------------------------------------------------------------------------------
  -f, --filter=LIST       A parameter to scan, given a list of options.
                          Each parameter must label a subdirectory in which the
                          specified input files can be found.
  -i, --infile=LIST       Name(s) of the input files that have to be submitted.
  -t, --test              Do not submit the jobs but print out the qsub commands.
  ---------------------------------------------------------------------------------
  -l walltime=TIME        Wall time for each job (format xx:xx:xx).
  -l nodes=y:ppn=z        Resources needed for each job (format 'nodes=x:ppn=y').
  -q QUEUE                Queue for each job (e.g. short/long, but not for skitty).
  -o, --others=LIST       Other options that should be passed to the qsub command.

FILTER EXPANSION:
  When specifying a new filter, following shorthands can be used:
    STATE_D2h0 == 'Ag0 B1g0 B2g0 B3g0 Au0 B1u0 B2u0 B3u0'

EXAMPLES:
  ${ME} -f '1.732 1.734 1.736' -f 12o12e -f 'STATE_D2h0 Ag1 Ag2' -l walltime=00:10:00 -l nodes=1:ppn=3 delcatty
  ${ME} -f '1.732 1.734 1.736' -f 18o18e -f STATE_D2h0 -l walltime=08:00:00 -l nodes=1:ppn=6 delcatty
  ${ME} -f '1.732 1.734 1.736' -f 33o34e -f 'Ag1 Ag2' -l walltime=72:00:00 -l nodes=1:ppn=all skitty
   
"
exit 0
}


# Transform long options to short ones
for arg in "$@"; do
  shift
  case "$arg" in
    "--help" | "-help")     set -- "$@" "-h" ;;
    "--filter")             set -- "$@" "-f" ;;
    "--infile")             set -- "$@" "-i" ;;
    "--test")               set -- "$@" "-t" ;;
    *)                      set -- "$@" "$arg"
  esac
done


# variables to remember the chosen options
filters=''         # default == no filters
qsubopt=''         # should always manually be set
cluster=''         # should always manually be set
infiles='dmrg.in'  # default name of the input files
test='false'       # default == submit the jobs


# try to handle the options
while getopts ":f:l:q:th" opt; do
  if [[ "${OPTARG}" =~ ^-{1,2}.* ]]
  then
    echo "${SYNTAX}" 1>&2
    exit 1
  fi
  case "${opt}" in
    h ) display_help
        exit 0 ;;
    t ) test='true' ;;
    f ) filters+="$(sed '
          s/STATE_D2h0/Ag0 B1g0 B2g0 B3g0 Au0 B1u0 B2u0 B3u0/;
          s/ /|/g; s/^/(/; s/$/)/
          ' <<< ${OPTARG}) " ;;
    i ) infiles="${OPTARG}" ;;
    l ) qsubopt+="-l ${OPTARG} " ;;
    q ) qsubopt+="-q ${OPTARG} " ;;
    o ) qsubopt+=" ${OPTARG}" ;;
    \?) echo "${SYNTAX}" 1>&2
        exit 1 ;;
  esac
done
shift "$((OPTIND - 1))"


# try to assign the arguments
if [ $# -ne '1' ]
then
  echo "${SYNTAX}" 1>&2
  exit 1
else
  cluster="$1"
fi

#echo $filters
#echo $qsubopt

# checkdir() {
#   #echo $1
#   IFS='|'
#   for filter in $@; do
#     
#   done
# }

#checkdir "${filters}"

#for filter in $filters; do
#    echo $filter
#done

#filtering=$(sed -r 's/( |^)\// | grep -E \//g' <<< "${filters}")
#echo $filtering

#find . -type f -name "${infiles}" | #eval(${filtering})
#for fil in ${filters}; do grep -E "/${fil}/"; done # | xargs echo

results=$(find . -type f -name "${infiles}")
for filter in ${filters}; do
  results=$(grep -E "/${filter}/" <<< "${results}")
done
for file in $results; do
    echo $file
done

# for file in $(find . -type f -name "${infile}" | xargs echo); do
#   for geom in ${geometry}; do
#   if grep -q 
#   echo "${file}"
# done
# 
# 
# for geom in ${geometry}; do
#   for geomdir in $(find . -type d -name "${geom}" | xargs echo); do
#     cd "${geomdir}"
#     for act in "${active}"; do
#        for actdir in  
#     for stat in ${states}; do
#       for statedir 
# 
# # validate the 
# 
# RAD="$1"
# ACT="$2"
# CLU="$3"
# 
# cd "${PWD}"
# 
# module swap cluster/"$2"
# for irrep in Ag0 B1g B2g B3g Au B1u B2u B3u; do
#     qsub jobfile.sh -N dmrg_CrF6_anorcc_dkh_"${RAD}"_"${ACT}"_"${irrep}" -v irrep="${irrep}"
# done
# 
# module swap cluster/"${3:-$2}"
# for irrep in Ag1 Ag2; do
#     qsub jobfile.sh -N dmrg_CrF6_anorcc_dkh_1.732_"${ACT}"_"${irrep}" -v irrep="${irrep}"
# done
# 
# 
# exit 0
# 
